module(get_pattern;;patterns)
---*
patterns = ARRAY([
"dws_(\\d+)",
"jog_(\\d+)",
"ups_(\\d+)",
"sit_(\\d+)",
"std_(\\d+)",
"wlk_(\\d+)",
])
return patterns 
------

module(create_header;file, vacc_count;)
---*
module(_add_to_line;file, "Mouvement, Gender, Index";)
ivacc = 0;
while (ivacc < vacc_count)
module(_add_to_line;file, ",Vacc";)
ivacc++
endwhile
------

module(get_directory_type;patterns, directory_name;directory_type)
---*
iPattern = 0
while (iPattern < patterns.lenght() && directory_name IS LIKE patterns[iPattern])
iPattern++;
endwhile
return iPattern - 1
------

module(get_person_id;file_path;person_id)
---*
if (file_path IS LIKE "sub(\\d+).csv")
module(_extract_from;file_path, "sub(\\d+).csv";id)
return id
endif
------

module(get_gender;person_id, subjects;gender)
---*
// IMPROVE : verify that the person_id is in te subjects
current_code = 0
current_gender = 0
module(_is_at_end;subjects;is_end)
// skip the header
module(_get_line;subjects;header)
while (!is_end && current_code < person_id)
module(_get_line;subjects;line)
module(_extract_str;line;current_code, current_gender)
module(_is_at_end;subjects;is_end)
endwhile
return current_gender 
------

module(process_file;file_index, line_count, output_file, file_path, directory_patterns, subjects;line_explored)
---*
filename = file_path->filename()
directory_name = file_path->directory_name()
module(get_directory_type;directory_patterns, directory_name;directory_type)
module(get_person_id;file_path;person_id)
// IMPROVE :: cache subjects file
module(get_gender;person_id, subjects;gender)

module(_add_to_line;output_file, directory_type + "," gender + "," + file_index;)

module(_open_file;file_path;file)
// skip the header
module(_get_line;file;header)
module(_is_at_end;file;is_end)
iline = 0
while (!is_end && iline < line_count)
module(_get_line;file;current_line)
module(_extract_str;current_line;acceleration_x, acceleration_y, acceleration_z)
acceleration = sqrt(acceleration_x ** 2 + acceleration_y ** 2 + acceleration_z ** 2)
module(_add_to_line;output_file, "," + acceleration;)
module(_is_at_end;file;is_end)
iline++
endwhile
module(_add_to_line;output_file, "\n";)
return iline 
------

module(explore_directory;file_index, train_file, test_file, root_path, directory_patterns, subjects;)
---*
module(_get_directory_iterator;root_path;directory_iterator)
while (directory_iterator.move_next())
current_path = directory_iterator.current_value
module(_is_file;current_path;is_file)
if (is_file)
// we are have hit a .csv file
module(process_file;file_index, 600, train_file, file_path, directory_patterns, subjects;train_line)
// if there is enought lines for the testset
if (train_line == 600)
module(process_file;file_index, 60, test_file, file_path, directory_patterns, subjects;train_line)
endif
file_index++
else
// its a directory, explore that directory to get the inner .CSVs
module(explore_directory;file_index, train_file, test_file, file_path, directory_patterns, subjects;)
endif
endwhile
------

module(main;;)
---*
archive_path = "\archive"
data_path = archive_path + "\data"
subject_path = archive_path + "\data_subjects_info.csv"
trainset_filepath = "trainset.csv"
testset_filepath = "testset.csv"

file_index = 0

module(_open_file;subject_path;subjects_file)
module(_open_file;trainset_filepath, "append";trainset_file)
module(_open_file;testset_filepath, "append";testset_file)

module(create_header;trainset_file, 600;)
module(create_header;testset_file, 60;)

module(get_pattern;;directory_patterns)
module(explore_directory;file_index, trainset_file, testset_file, data_path, directory_patterns, subjects_file;)

module(_close_file;subjects_file;)
module(_close_file;trainset_file;)
module(_close_file;testset_file;)
------